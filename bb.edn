{:paths ["src"]
 :deps {medley/medley {:mvn/version "1.3.0"}
        org.clojure/core.logic {:mvn/version "1.0.1"}
        etaoin/etaoin {:mvn/version "1.0.40"}
        djblue/portal {:mvn/version "0.32.0"}
        org.clojure/core.cache {:mvn/version "1.0.225"}
        net.cgrand/xforms {:mvn/version "0.19.5"}
        org.clojure/core.specs.alpha {:mvn/version "0.2.62"}
        rewrite-clj/rewrite-clj {:mvn/version "1.1.47"}
        dawran6/emoji {:mvn/version "0.1.5"}
        org.babashka/spec.alpha {:git/url "https://github.com/babashka/spec.alpha"
                                 :git/sha "1a841c4cc1d4f6dab7505a98ed2d532dd9d56b78"} refactor-nrepl/refactor-nrepl {:mvn/version "2.5.1"}
        io.github.lispyclouds/bblgum {:git/sha "1d4de3d49b84f64d1b71930fa1161f8d2622a4d9"}
        selmer/selmer {:mvn/version "1.12.50"}}
 :repl-options {:init-ns search.main}
 :tasks
 {:requires ([babashka.fs :as fs]
             [babashka.process :as p :refer [process]]
             [babashka.wait :as wait]
             [knock.utils :as u :refer [mock]]
             [knock.emoji :as e]
             [knock.server :as s]
             [knock.roam :as r]
             [knock.aws :as aws]
             [knock.aliyun :as aliyun]
             [knock.block :as  block]
             [knock.book :as b :refer :all]
             [knock.browser :as br]
             [knock.poker :as poker]
             [knock.hanzi :as hanzi]
             [knock.ticker :as ticker]
             [clojure.string :as str]
             [knock.chat :as chat]
             [knock.wn :as w])
  nrepl (let [port (with-open [sock (java.net.ServerSocket. 0)] (.getLocalPort sock))
              proc (process (str "bb nrepl-server " port) {:inherit true})]
          (wait/wait-for-port "localhost" port)
          (spit ".nrepl-port" port)
          (fs/delete-on-exit ".nrepl-port")
          (deref proc))

  clean (do
          (println "Removing target folder.")
          (fs/delete-tree "target"))
  write-roam-xzl (do (r/write r/g (clojure.string/join " " *command-line-args*) :text-align "left"))
  write-roam (do (r/write (r/xzl)
                          (clojure.string/join " " *command-line-args*)
                          :text-align "left"))

  wordnet (do (println (apply w/search-wn  *command-line-args*)))
  test-test (println (u/test-test))

  ;;wrap up 
  ;;local-call (apply s/local-call *command-line-args*)
  jp (println (apply str (map (requiring-resolve 'knock.jp/search-word) *command-line-args*)))

  play-poker (apply str (u/cur-time-str) "\n" (poker/play))

  ;;deprecated replaced by bb filter
  ;;parse (println (b/->html (first *command-line-args*)))

  gum (println (apply block/gum *command-line-args*))
  filter (println (apply b/pick *command-line-args*))
  filter-wen (b/pick (mock br/wiki-source (first *command-line-args*)))
  book (println (b/fuzzy-open (first *command-line-args*)))
  local-server (p/shell "clj -M -m lucy.local-server")
  ;!!! notice this choosen emoji will be copied to your clipboard 
  emoji (println (e/i-emoji))

  qq (println (u/quote-quote (apply str *command-line-args*)))
  alias (println (u/alias (first *command-line-args*) (clojure.string/join " " (rest *command-line-args*))))
  cha (hanzi/show (mock hanzi/cha (first *command-line-args*)))
  wen (println (mock br/wiki-source (first *command-line-args*)))

  chop (u/pp (block/->phrase 2 (block/->units (str/join *command-line-args*))))

  shuzhe (println (str/join "\n" [(apply str (repeat 80 "-"))
                                  ""
                                  (block/->shu (first *command-line-args*))]))

  ;; recommending of doing an alias: bb alias chatgpt "cd /Users/dc/kkprop/knock && bb gpt-prompt clojure"
  ;gpt-prompt (println (u/mock chat/prompt (apply str *command-line-args*)))
  ;co-gpt (chat/clipboard-prompt)
  run-model (chat/run-model)

  lr (block/lazy-read (first *command-line-args*))

  aws-change-password (aws/change-password (first *command-line-args*))
  aliyun-change-password (aliyun/change-password (first *command-line-args*))

  ;;click until brightest
  display-on (u/max-brightness)
  ;;click until display off
  display-off (u/min-brightness)
  auto-doff (u/auto-doff)

  play-bubble (block/play-bubble (when-not (empty? *command-line-args*)
                                   (u/force-int (first *command-line-args*))))
  ;;continue bubble
  lift-pause (u/on! block/lp)

  watch (ticker/watch)
  live (ticker/live)

  mock-laundry (println "cleaned:" (count (u/mock-laundry)))

;;
  }}
